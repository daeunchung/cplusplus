/*
순수 가상 함수와 추상 클래스

순수 가상 함수를 한개라도 가진 클래스는 추상 클래스 이며 고유한 타입의 객체로 만들어 질수 없다 
객체화 될수 없기 때문에 추상적으로만 존재, 구체화 불가능 . 추상클래스 자체만으로 할수 있는것이 없다
그 대신 추상클래스를 상속받아서 메서드 오버라이딩 해주면 자식클래스를 객체로 만들어 사용할 수 있다

일반 가상함수와 순수 가상함수를 구분할 수 있어야 한다 !!
순수 가상함수가 있어야 추상 클래스 이고 객체화 불가능 한 것
*/

#include <iostream>
using namespace std;

class A {
public:
	// 실존? 존재하는 가상함수
	//virtual void f() {
	//	cout << "A::f()" << endl;
	//}

	// 순수 가상 함수	가 있을 경우	
	// 즉, A *a = new A(); 해줘도(실제론못함) a->f(); f()가 존재하지 않기 때문에 호출할 수 없다 
	// 뿐만아니라 가상함수를 한개라도 가진 클래스는 그 타입의 객체를 만들 수 없다
	// 순수 가상 함수가 한개라도 존재하면 A *a = new A(); 할 수 없다 
	//	=> 추상 클래스 (추상적으로만 존재, 실제로 구체적인 객체는 만들 수 없다)

	virtual void f() = 0;	// 또는 f() = NULL;
};

class B : public A {
public:
	void f(){
		cout << "B::f()" << endl;
	}
};

int main() {
	A *a = new B;
	a->f();
	delete a;
}